# Generated by Django 2.2 on 2021-04-09 11:14
from datetime import datetime, timedelta

import pytz
from django.db import migrations

def recreate_rapport(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.

    Configuration = apps.get_model('APIcashless', 'Configuration')
    RapportArticlesVendu = apps.get_model('APIcashless', 'RapportArticlesVendu')
    ArticleVendu = apps.get_model('APIcashless', 'ArticleVendu')
    config = Configuration.objects.get()

    RapportArticlesVendu.objects.all().delete()


    def date_reele(datetime_vente):
        """

        @type datetime_vente: datetime
        """
        jour = datetime_vente.date()

        tzlocal = pytz.timezone(config.fuseau_horaire)
        debut_jour = tzlocal.localize(datetime.combine(jour, datetime.min.time()), is_dst=None) + timedelta(
            hours=4)

        # lendemain_quatre_heure = tzlocal.localize(datetime.combine(jour, datetime.max.time()), is_dst=None) + timedelta(
        #     hours=4)

        if datetime_vente < debut_jour:
            # alors ça s'est passé au petit matin. La date de l'évènement est celle de la veille.
            event = datetime_vente - timedelta(days=1)
            return event.date()
        else:
            return datetime_vente.date()

    for article_vendu in ArticleVendu.objects.all():

        # import ipdb; ipdb.set_trace()
        date = date_reele(article_vendu.date_time)

        ligne_rapport = RapportArticlesVendu.objects.get_or_create(
            article=article_vendu.article,
            date=date,
        )[0]

        ligne_rapport.qty += article_vendu.qty

        if article_vendu.moyen_paiement == config.moyen_paiement_espece:
            ligne_rapport.espece += round(float(article_vendu.prix * article_vendu.qty), 2)

        elif article_vendu.moyen_paiement == config.moyen_paiement_cb:
            ligne_rapport.carte_bancaire += round(float(article_vendu.prix * article_vendu.qty), 2)

        elif article_vendu.moyen_paiement == config.monnaie_principale:
            ligne_rapport.monnaie_principale += round(float(article_vendu.prix * article_vendu.qty), 2)

        elif article_vendu.moyen_paiement == config.moyen_paiement_mollie:
            ligne_rapport.mollie += round(float(article_vendu.prix * article_vendu.qty), 2)

        elif article_vendu.moyen_paiement == config.moyen_paiement_oceco:
            ligne_rapport.oceco += round(float(article_vendu.prix * article_vendu.qty), 2)

        elif article_vendu.moyen_paiement == config.monnaie_principale_cadeau:
            ligne_rapport.monnaie_principale_cadeau += round(float(article_vendu.prix * article_vendu.qty), 2)

        ligne_rapport.save()

def reverse(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('APIcashless', '0020_oceco_commande_20210409_1349'),
    ]

    operations = [
            migrations.RunPython(recreate_rapport, reverse),
    ]
